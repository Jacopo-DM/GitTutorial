{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the official website of the \"Introduction to Git\" VU workshop organized by [INSERT NAME OF ORGANISATION]! </p> <p>This tutorial contains a series of lessons that will teach you the basics of Git. It is intended for beginners who have never used Git before, but it can also serve as a refresher course for those who have used it in the past.</p> <p>Hopefully, you landed on this page after opening the link given to you on the day of the event, or as one of the pre-session reviewers, if you stumbled upon this page by accident please bare in mind this website was designed to go hand-in-hand with a physical workshop and isn't meant to be used as a standalone resource. </p> <p>Find the slides for the workshop at [INSERT LINK TO SLIDES].</p>"},{"location":"#what-is-git","title":"What is Git?","text":"<p>Git stands for \"Global Information Tracker\", which is a free and open-source distributed version control system** that allows you to track changes to files and collaborate with other people on projects, both large and small.  It's a formidable tool, that is used by many developers and researchers to manage their code and data. In this tutorial, we will be covering the fundamentals of Git, and how to use it to manage your projects.</p>"},{"location":"#why-is-git-useful","title":"Why Is Git Useful?","text":"<p>The benefits of Git can be summarised as follows:</p> <ul> <li>Version Control: Git allows you to track changes to files and revert to previous versions if needed.</li> <li>Collaboration: Git allows you to collaborate with others on projects.</li> <li>Backup: Git allows you to back up your files to a remote server.</li> <li>Access Anywhere: Git allows you to access your files from any computer with an internet connection.</li> </ul>"},{"location":"#what-we-will-be-covering-in-this-workshop","title":"What We WILL Be Covering In This Workshop","text":"<p>In this workshop we will be learning the basics of Git, such as how to:</p> <ul> <li>Create a GitHub repository</li> <li>Initialize a repository</li> <li>Add files to the staging area</li> <li>Commit changes</li> <li>Push changes to a remote repository</li> <li>Pull changes from a remote repository</li> <li>Resolve merge conflicts</li> <li>How to undo changes to a file to a previous commit</li> </ul>"},{"location":"#what-we-wont-be-covering-in-this-workshop","title":"What We WON'T Be Covering In This Workshop","text":"<p>Git is a very complex piece of software, with many features which are used by professional developers for managing large, multi-person projects. Many of these features are beyond the scope of this workshop, and will not be covered. These features include:</p> <ul> <li> <p>Branching: a very powerful feature of Git, which allows you to create multiple versions of your project (it's also the inspiration for the Git logo). While this would be commonly used for small projects as well as large ones, it is not fundamental and is more easily tackled once you have a good understanding of the basics of Git. </p> </li> <li> <p>Collaboration: multi-developer codebases, where various developers can update the same code simultaneously, are essential for industry and research. It is also the reason why Git was created and is so widely used. However, this requires a more complex workflow, which is beyond the scope of this workshop. Having a solid understanding of the basics of Git is a prerequisite for learning how to collaborate with others on projects.</p> </li> </ul>"},{"location":"#what-is-github","title":"What is GitHub?","text":"<p>GitHub is a website that hosts Git repositories. It is a very popular website that is used by many developers and researchers to host their code and data. You can think of it as a Dropbox, Google Photos or iCloud but for code. In this workshop, we will be using GitHub to host our repository.</p> <p>Not Mass Storage!</p> <p>GitHub isn't a mass storage solution, GitHub will reject any file larger than <code>100</code>MB, and if the size of the repository exceeds <code>1 GB</code> GitHub will reject the repository or stop accepting updates. For code, this is usually not a problem (this equates to millions of lines of code), but if you are planning on using GitHub to host large files (e.g. images, videos, etc.) you should consider using a different service.</p>"},{"location":"#what-will-we-be-doing","title":"What Will We Be Doing?","text":"<p>In this workshop, we will be using Git and GitHub to manage a project. Git is designed to work on projects of any size, from a simple website to a large software project. As such, the best way to learn Git is to use it on a project.</p> <p>We crafted three possible projects, which we (hopefully) will get to after the pizza break .</p>"},{"location":"#the-three-choices-are","title":"The Three Choices Are:","text":"<p>Easy \u2003 MNIST Classifier</p> <p>Coding a basic MNIST classifier using Pytorch. </p> <p>Medium \u2003 Minecraft Clone</p> <p>Coding a simple game using the Ursina game engine (Minecraft clone).</p> <p>Advanced \u2003 Personal Website</p> <p>Building and publishing a simple personal website using MkDocs with Material for MkDocs (the same used for the website you are currently using). The website will be hosted on GitHub for free and you will be able to view the website from any browser.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is a companion website for the \"Learning Basics of Git\" workshop, which is an in-person event, if you are reading this website but have no idea about the workshop, please bare in mind this website was designed to go hand-in-hand with a physical workshop and it's not meant to be used as a standalone resource.</p> <p>When writing this tutorial I tried to make no assumptions about the prior knowledge of the reader, as such I also cover briefly pre-requisites. Realistically, these should already be understood by anyone who is attending the workshop, but I have included them for completeness. Some programming experience is also assumed, but I have tried to keep the code as simple as possible.</p> <p>This workshop is designed to be a fun introduction to the basics of Git and GitHub. </p> <p>It is intended for beginners who have never used Git before, but it can also serve as a refresher course for those who have used it in the past. </p> <p>It is not intended to be a comprehensive guide to Git and GitHub. If you are interested in learning more about Git and GitHub I recommend checking out the following resources:</p> <ul> <li>Git Documentation</li> <li>GitHub Guides</li> <li>Git Guides</li> <li>Atlassian Git Tutorials</li> <li>Git Book</li> <li>Introduction To GitHub</li> </ul> <p>This tutorial was made in February 2023 and won't likely be kept up to date beyond the date of the workshop.</p> <p>"},{"location":"#lets-start","title":"Let's Start!","text":"<p>You can now move to the first session </p>"},{"location":"get_started/","title":"Prerequisites","text":"<p>To follow along with this workshop you will need to have certain software packages installed on your computer. On this page, you can find which software packages you need to install, external links to the official websites of the software packages and instructions on how to install them.</p>"},{"location":"get_started/#os-specific-instructions","title":"OS Specific Instructions","text":"<p>This guide makes use of \"admonitions\" to provide additional information for specific operating systems. </p> <p>Give the following example admonition a try to see how it works: </p> <p>This is a note for Windows users.</p> <p>This is a note for Mac users.</p> <p>This is a note for Linux users.</p> <p>Before you begin, you should make sure that you have access to all the following software packages:</p>"},{"location":"get_started/#a-web-browser","title":"A Web Browser","text":"<p>A web browser (e.g. Chrome, Firefox, Safari, Edge) is necessary to follow along with this tutorial, as well as access Github.</p>"},{"location":"get_started/#a-command-line-interface","title":"A Command Line Interface","text":"<p>To complete this tutorial, you will need access to a terminal window, any application that allows you to type commands and see the results of those commands. These kinds of applications already come pre-installed on Mac, Windows, and Linux.</p>"},{"location":"get_started/#how-to-check-if-you-have-a-command-line-interface","title":"How To Check If You Have A Command Line Interface","text":"<p>The Windows console is called the Command Prompt, also named cmd.</p> <p>Open Command Prompt on Windows by selecting the Start button, typing <code>cmd</code> in the search box, and selecting the \"Command Prompt\" application.</p> <p> You should see something like this </p> <p>OS X\u2019s standard console is a program called Terminal.</p> <p>To open Terminal on Mac by pressing the <code>Command</code> key and the space bar at the same time. Then, type \"terminal\" in the search box and select <code>terminal.app</code>.</p> <p> You should see something like this </p> <p>Different Linux distributions (e.g Ubuntu, Fedora, Mint) may have different console programs, usually referred to as a terminal. The exact terminal you start up, and how, can depend on your distribution. On Ubuntu, you will likely want to open Gnome Terminal. </p> <p>To open Gnome Terminal on Ubuntu you can open a terminal window by pressing the <code>Windows</code> key (also known as the super key). Then, type \"terminal\" in the search box and select <code>Terminal</code>.</p> <p> You should see something like this </p>"},{"location":"get_started/#text-editor","title":"Text Editor","text":"<p>A text editor is a program that you can use to create and edit text files. It is a very important tool for developers because it allows you to write code and view the results of your work.</p> <p>There are many different text editors available for Windows, Mac, and Linux. Some of the most popular ones include:</p> <ul> <li>Visual Studio Code</li> <li>Atom</li> <li>Sublime Text</li> <li>Notepad++</li> </ul> <p>To install a text editor, follow the instructions on the official website of the text editor that you want to use.</p> <p>Visual Studio Code is a good choice for beginners.</p>"},{"location":"get_started/#python-3","title":"Python 3","text":"<p>Python 3.6 or later is required to follow along with this tutorial, the latest official installation can be found here.</p> <p>Two useful resources for installing Python 3 on Windows, Mac, and Linux are:</p> <ul> <li>Python for Beginners: Getting Started.</li> <li>Python 3 Installation &amp; Setup Guide</li> </ul>"},{"location":"get_started/#checking-your-python-version","title":"Checking Your Python Version","text":"<p>If you're not sure which version of python you have installed, you can check by running one of the following in your terminal:</p> <pre><code>py --version\n</code></pre> <pre><code>python3 --version\n</code></pre> <pre><code>python3 --version\n</code></pre> <p>This should return something like this:</p> <pre><code>Python 3.10.10\n</code></pre>"},{"location":"get_started/#pip","title":"Pip","text":"<p>Pip is a package manager for Python, it allows you to install and manage additional packages that are not part of the Python standard library.</p> <p>If you don't have pip installed, we can install it as follows (original source):</p> <p>Copied from the source above:**</p> <pre><code> py -m ensurepip --upgrade\n</code></pre> <pre><code>python -m ensurepip --upgrade\n</code></pre> <pre><code>python -m ensurepip --upgrade\n</code></pre>"},{"location":"get_started/#checking-your-pip-version","title":"Checking Your Pip Version","text":"<p>If you're not sure which version of pip you have installed, you can check by running one of the following in your terminal:</p> <pre><code>py -m pip --version\n</code></pre> <pre><code>python3 -m pip --version\n</code></pre> <pre><code>python3 -m pip --version\n</code></pre> <p>This should return something like this:</p> <pre><code>pip 23.0 from /opt/homebrew/lib/python3.10/site-packages/pip (python 3.10)\n</code></pre>"},{"location":"get_started/#optional-python-environment","title":"(Optional) Python Environment","text":"<p>If you are new to Python, you may want to consider using a Python environment. A Python environment is a tool that helps you manage different versions of Python and Python packages. Using a virtual environment is always a good idea, and is suggested for this tutorial.</p> <p>There are many different Python environments available, some of the most popular ones include:</p> <ul> <li>Virtualenv</li> <li>Pipenv</li> </ul> <p>Other more advanced alternatives are:</p> <ul> <li>Poetry</li> <li>PDM</li> </ul> <p>Alternatively, any Anaconda variant is also a good choice:</p> <ul> <li>Anaconda</li> <li>Miniconda</li> <li>Miniforge</li> </ul> <p>If this topic is confusing or overwhelming, stick to the easiest option, which is virtualenv.  Alternatively, if you have Anaconda already installed, you can use that.</p>"},{"location":"get_started/#virtualenv","title":"Virtualenv","text":"<p>Virtualenv is a tool to create isolated Python environments. Virtualenv creates a folder that contains all the necessary executables to use the packages that a Python project would need.</p> <p>Virtualenv can be installed and used in this manner: (source):</p> <p>Congratulations, you have created a virtual environment! </p> <p>To deactivate the virtual environment, run the following in your terminal:</p> <pre><code>deactivate\n</code></pre>"},{"location":"get_started/#install-virtualenv","title":"Install Virtualenv","text":"<p>To install virtualenv, run the following in your terminal:</p> <pre><code>py -m pip install --user virtualenv\n</code></pre>"},{"location":"get_started/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>To create a new virtual environment, run the following in your terminal:</p> <pre><code>py -m venv env\n</code></pre>"},{"location":"get_started/#activating-a-virtual-environment","title":"Activating a Virtual Environment","text":"<p>To activate the virtual environment, run the following in your terminal:</p> <pre><code>.\\env\\Scripts\\activate\n</code></pre>"},{"location":"get_started/#confirm-the-virtual-environment-is-active","title":"Confirm The Virtual Environment is Active","text":"<p>Confirm that you are using the virtual environment by running the following in your terminal:</p> <pre><code>where python\n</code></pre> <p>Which should return something like this:</p> <pre><code>...\\env\\Scripts\\python.exe\n</code></pre>"},{"location":"get_started/#install-virtualenv_1","title":"Install Virtualenv","text":"<p>To install virtualenv, run the following in your terminal:</p> <pre><code>python3 -m pip install --user virtualenv\n</code></pre>"},{"location":"get_started/#create-a-virtual-environment_1","title":"Create a Virtual Environment","text":"<p>To create a new virtual environment, run the following in your terminal:</p> <pre><code>python3 -m venv env\n</code></pre>"},{"location":"get_started/#activating-a-virtual-environment_1","title":"Activating a Virtual Environment","text":"<p>To activate the virtual environment, run the following in your terminal:</p> <pre><code>source env/bin/activate\n</code></pre>"},{"location":"get_started/#confirm-the-virtual-environment-is-active_1","title":"Confirm The Virtual Environment is Active","text":"<p>Confirm that you are using the virtual environment by running the following in your terminal:</p> <pre><code>which python\n</code></pre> <p>Which should return something like this:</p> <pre><code>.../env/bin/python\n</code></pre>"},{"location":"get_started/#install-virtualenv_2","title":"Install Virtualenv","text":"<p>To install virtualenv, run the following in your terminal:</p> <pre><code>python3 -m pip install --user virtualenv\n</code></pre>"},{"location":"get_started/#create-a-virtual-environment_2","title":"Create a Virtual Environment","text":"<p>To create a new virtual environment, run the following in your terminal:</p> <pre><code>python3 -m venv env\n</code></pre>"},{"location":"get_started/#activating-a-virtual-environment_2","title":"Activating a Virtual Environment","text":"<p>To activate the virtual environment, run the following in your terminal:</p> <pre><code>source env/bin/activate\n</code></pre>"},{"location":"get_started/#confirm-the-virtual-environment-is-active_2","title":"Confirm The Virtual Environment is Active","text":"<p>Confirm that you are using the virtual environment by running the following in your terminal:</p> <pre><code>which python\n</code></pre> <p>Which should return something like this:</p> <pre><code>.../env/bin/python\n</code></pre>"},{"location":"get_started/#anaconda-environment","title":"Anaconda Environment","text":"<p>If you have Anaconda installed, you can create, activate, and deactivate environments using the following commands:</p> Create a New EnvironmentActivate the EnvironmentDeactivate The Environment is Active <p>To create a new environment, run the following in your terminal:</p> <pre><code>conda create -n git-tutorial python=3.8\n</code></pre> <p>To activate the environment, run the following in your terminal:</p> <pre><code>conda activate git-tutorial\n</code></pre> <p>To deactivate the environment, run the following in your terminal:</p> <pre><code>conda deactivate\n</code></pre> <p>"},{"location":"get_started/#you-have-everything-you-need","title":"You Have Everything You Need!","text":"<p>You can now move to the next session </p>"},{"location":"get_started/stage_1/","title":"Installation","text":""},{"location":"get_started/stage_1/#git","title":"Git","text":"<p>To complete this tutorial, you will need to install Git on your computer.</p> <p>Git is free and open source, it is available for Windows, Mac, and Linux.</p>"},{"location":"get_started/stage_1/#installing-git","title":"Installing Git","text":"<p>To install Git, follow the instructions on the official Git website for your operating system:</p> <p>Following the installation guide for Windows, we have a few options.</p> <p>From these options, the simplest and most popular option is to download the Git for Windows installer.</p> <p>The step-by-step instructions for installing Git for Windows are (copied from the Git for Windows website):</p> <ol> <li>Navigate to the latest Git for Windows installer and download the latest version.</li> <li>Once the installer has started, follow the instructions as provided in the Git Setup wizard screen until the installation is complete.</li> </ol> <p>Git Bash</p> <p>During the installation, you will be given the option to install Git Bash. Git Bash is a terminal emulator that provides a Bash shell for Git on Windows. </p> <p>This is the recommended option.</p> <p>You can open Git Bash from the start menu, just as we did with the Windows Command Prompt.</p> <p>From this point on, we will assume that you have selected this option whenever we use the 'git' command in the terminal.</p> <ol> <li>Open the windows command prompt (or Git Bash if you selected not to use the standard Git Windows Command Prompt during the Git installation).</li> </ol> <p>Following the installation guide for Mac, we have a few options.</p> <p>From these options, the simplest two options are:</p> <ul> <li>Xcode Command Line Tools</li> <li>Homebrew</li> </ul> <p> XCode </p> <p>You can install Xcode through the App Store (recommended) or by running the following command in your terminal:</p> <pre><code>xcode-select --install\n</code></pre> <p>Installing Xcode Command Line Tools will also install Git.</p> <p> Homebrew </p> <p>Alternatively, you can install Homebrew. Homebrew is a package manager for macOS that makes it easy to install and update Git, as well as a myriad of other software packages. If you develop software on a Mac, you should consider installing Homebrew.</p> <p>Note: Xcode is a prerequisite for Homebrew, so you will need to install Xcode before installing Homebrew.</p> <p>Installation instructions for Homebrew can be found on the Homebrew website.</p> <p>You can install Homebrew by running the following command in your terminal (copied from the Homebrew website):</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Once Homebrew is installed, you can install Git by running the following command in your terminal:</p> <pre><code>brew install git\n</code></pre> <p>Following the installation guide for Linux, we see that different linux distributions have different installation methods depending on the package manager used. </p> <p>For Ubuntu, you can install Git by running the following command in your terminal:</p> <pre><code>sudo apt-get install git-all\n</code></pre> <p>(See link for other Linux distributions.)</p> <p>Git Guides is also a good resource for installing Git on Windows, Mac, and Linux.</p>"},{"location":"get_started/stage_1/#checking-the-installation","title":"Checking the Installation","text":"<p>You can check that Git is installed by running the following command in your terminal (depending on how you installed Git on Windows, this may be Git Bash terminal):</p> <pre><code>git version\n</code></pre> <p>Which should return something like this:</p> <pre><code>git version 2.39.1\n</code></pre>"},{"location":"get_started/stage_1/#configuring-git","title":"Configuring Git","text":"<p>Git is a command-line tool, so you will need to open a terminal window to use it. If you are using Windows, you can open a terminal window by pressing the Windows key and typing \"terminal\" in the search box. Then, click on the \"Terminal\" application.</p> <p>If you are using Mac, you can open a terminal window by pressing the Command key and the space bar at the same time. Then, type \"terminal\" in the search box and press the Enter key.</p> <p>If you are using Linux, you can open a terminal window by pressing the Ctrl key and the Alt key at the same time. Then, type \"terminal\" in the search box and press the Enter key.</p> <p>Once you have opened a terminal window, you can use the following commands to configure Git:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"example@email.com\"\n</code></pre> <p>Replace \"Your Name\" with your name and \"example@email.com\" with your email address.</p> <p>"},{"location":"get_started/stage_1/#you-have-successfully-installed-git","title":"You Have Successfully Installed Git!","text":"<p>You can now move to the next session </p>"},{"location":"get_started/stage_2/","title":"Setting Up GitHub","text":"<p>Before we can start with step 1, we need to set up our GitHub account. We will need to create an SSH key, which will allow us to connect to GitHub without having to enter our username and password every time.</p>"},{"location":"get_started/stage_2/#creating-a-github-account","title":"Creating a GitHub Account","text":"<p>To complete this tutorial, you will need to create a GitHub account. Follow the \"Sign Up\" instructions on the official GitHub website.</p> <p>It should look something like this:</p> <p></p> GitHub sign-up page <p>If the sign-up was successful, you should see a page that looks like this:</p> <p></p> GitHub homepage"},{"location":"get_started/stage_2/#creating-an-ssh-key","title":"Creating an SSH Key","text":"<p>An SSH key is a pair of files that are used to authenticate you when you connect to a remote server. It is a very important tool for developers because it allows you to connect to remote servers without having to enter your username and password every time.</p> <p>To complete this tutorial, you will need to create an SSH key.</p> <p>To create an SSH key, we follow the instructions on the official Github website for your operating system SSH key generation.</p> <p>Following these instructions, you will need to run the following command in the terminal:</p> <p>Generating a New SSH Key</p> <ol> <li> <p>Open the \"Git Bash\" (Windows) or \"Terminal\" (Max/Linux) application</p> </li> <li> <p>Run the following command:</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> </li> <li> <p>Select the default location for the key (default is usually fine)</p> </li> <li> <p>Type a secure passphrase (none is fine for personal use)</p> </li> <li> <p>Copy the key to your clipboard</p> </li> </ol> <p>Copying the SSH Key to Your Clipboard</p> <ol> <li> <p>Open the \"Git Bash\" (Windows) or \"Terminal\" (Max/Linux) application</p> </li> <li> <p>Run the following command:</p> <p><pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> This will print your key in the terminal window</p> </li> <li> <p>Copy the key to your clipboard (highlight the key and press <code>Ctrl + C</code>)</p> </li> </ol>"},{"location":"get_started/stage_2/#adding-the-ssh-key-to-your-github-account","title":"Adding the SSH Key to Your GitHub Account","text":"<p>Now that we have created an SSH key, we need to add it to our GitHub account.</p> <p>We do this by opening the \"Settings\" page on our GitHub account, and then clicking on the \"SSH and GPG keys\" tab, then, we click on the \"New SSH key\" button.</p> <p></p> GitHub settings <p></p> SSH and GPH keys <p>We can then paste our SSH key into the \"Key\" field, give it a title in the \"Title\" field, and click \"Add SSH Key\".</p> <p></p> Adding a new SSH key <p>Successfully adding the SSH key should look like this:</p> <p></p> SSH key added <p>This means that we have successfully set up our GitHub account, and we can finally create our first repository!</p> <p>"},{"location":"get_started/stage_2/#you-have-successfully-set-up-github","title":"You Have Successfully Set Up GitHub!","text":"<p>You can now move to the next session </p>"},{"location":"get_started/stage_3/","title":"Our First Repo","text":""},{"location":"get_started/stage_3/#basic-workflow-of-git","title":"Basic Workflow of Git","text":"<p>Git has a very simple workflow. It is based on the following steps:</p> <p>Advanced Git Workflow</p> <ol> <li>Create a \"repository\" (project) with a Git hosting tool (like GitHub)</li> <li>Copy (or clone) the repository to your local machine</li> <li>Add a file to your local repo and \"commit\" (save) the changes</li> <li>\"Push\" your changes to your main branch</li> <li>Make a change to your file with a Git hosting tool and commit</li> <li>\"Pull\" the changes to your local machine</li> <li>Create a \"branch\" (version), make a change, and commit the change</li> <li>Open a \"pull request\" (propose changes to the main branch)</li> <li>\"Merge\" your branch to the main branch</li> </ol> <p>As mentioned earlier, we will ignore the last three steps in this tutorial, because they are not necessary for beginners, nor to use Git for small projects.</p> <p>So, our workflow will be as follows:</p> <p>Simple Git Workflow</p> <ol> <li>Create a \"repository\" (project) with a Git hosting tool (like GitHub)</li> <li>Copy (or clone) the repository to your local machine</li> <li>\"<code>Add</code>\" a file to your local repo \"<code>commit</code>\" (save) the changes</li> <li>\"<code>Push</code>\" your changes to your main branch</li> <li>Make a change to your file with a Git hosting tool and commit</li> <li>\"<code>Pull</code>\" the changes to your local machine/</li> </ol>"},{"location":"get_started/stage_3/#creating-a-new-repo","title":"Creating a New 'Repo'","text":"<p>Repo is short for \"repository\". A repository is a project that is stored in a Git hosting tool (like GitHub). It is a place where you can store your code, and collaborate with others.</p>"},{"location":"get_started/stage_3/#github","title":"GitHub","text":"<p>We can get started creating a new repository by going to the GitHub home page and clicking the \"Create repository\" button or the \"+\" (plus) symbol at the top right and then \"New repository\".</p> <p></p> GitHub homepage <p>Doing so will launch a new page where we can create our new repository.</p> <p></p> GitHub homepage <p>We can simply give it a name (eg. \"Git Tutorial\"), leaving all other parameters as default, and click the \"Create repository\" button.</p> <p>(The \"private/public\" option is used to determine whether the repository is public or private. If it is public, anyone can see it. If it is private, only you and the people you invite can see it. We will leave it public for now.)</p> <p>Doing this will present us with our new repository, ready to be used.</p> <p></p> GitHub homepage <p>This page provides us with excellent starting points to start coding in our new repository. We will use these to get started in the next section.</p> <p>"},{"location":"get_started/stage_3/#you-have-successfully-created-your-first-repository","title":"You Have Successfully Created Your First Repository!","text":"<p>You can now move to the next session </p>"},{"location":"get_started/stage_4/","title":"Cloning The Repository &amp; Staging Area","text":"<p>Progress</p> <p>In the earlier section, we explained the basic workflow of Git. We will use the table below to keep track of our progress.</p> <ul> <li> 1. Create a \"repository\" (project) with a Git hosting tool (like GitHub)</li> <li> 2. Copy (or clone) the repository to your local machine</li> <li> 3. \"<code>Add</code>\" a file to your local repo \"<code>commit</code>\" (save) the changes</li> <li> 4. \"<code>Push</code>\" your changes to your main branch</li> <li> 5. Make a change to your file with a Git hosting tool and commit</li> <li> 6. \"<code>Pull</code>\" the changes to your local machine</li> </ul>"},{"location":"get_started/stage_4/#cloning-the-repository","title":"Cloning the Repository","text":"<p>After we created the repo on GitHub, we were left with a page showing us various ways that we could populate our GitHub repo and integrate it with a \"local  repo\" (one that exists on your machine), out of all of these options, we are interested in the following:</p> <p></p> GitHub homepage <p>We will follow these instructions, with some extra guidance.</p>"},{"location":"get_started/stage_4/#creating-a-new-directory","title":"Creating a New Directory","text":"<p>To create a new Git repository, you will need to create a new directory (aka a folder) somewhere on your computer. </p> <p>Then, you will need to open a terminal window and navigate to that directory:</p> Linux/MacOSCommand PromptGit Bash <p>This can be done by either right-clicking on the folder and selecting \"Open in Terminal\" or by running the following command:</p> <pre><code>cd /path/to/directory\n</code></pre> <p>[TODO: Check this] This can be done by either right-clicking on the folder and selecting \"Command Prompt here...\" or by running the following command:</p> <pre><code>cd C:\\path\\to\\directory\n</code></pre> <p>[TODO: Check this] This can be done by either right-clicking on the folder and selecting \"Git Bash here...\" or by running the following command:</p> <pre><code>cd /c/path/to/directory\n</code></pre> <p>(You can check the current folder path with <code>pwd</code>.)</p>"},{"location":"get_started/stage_4/#initializing-the-repository","title":"Initializing the Repository","text":"<p>To initialize a new Git repository, you will need to run the following command:</p> <pre><code>git init\n</code></pre> <p>This will generate an invisible <code>.git</code> folder in your current directory. This folder contains all of the information that Git needs to keep track of your repository.</p>"},{"location":"get_started/stage_4/#opening-the-repository-in-a-text-editor","title":"Opening the Repository in a Text Editor","text":"<p>We will want to open the folder in your text editor of choice so that we can add some files to it.</p> <p>If you have an open VS Code window, you can open the folder by using the <code>File &gt; Open Folder</code> menu option.</p> <p>If you are using a different text editor, a similar command should be available. </p>"},{"location":"get_started/stage_4/#adding-a-readmemd-file","title":"Adding a README.md File","text":"<p>Through our text editor, we will want to create a new file called <code>README.md</code>. This is a Markdown file, which is a simple way to format text. </p> <p>The README file is a special file that will contain some information about our project to display on the main page of our GitHub. It is a good idea to include a README file in every project you create, as it will help you and others understand what your project is about.</p> <p>Once you have created the <code>README.md</code> file, we will just add a single line to it:</p> <pre><code># My First Repo\n</code></pre> <p><code>#</code> is a Markdown heading, and <code>My First Repo</code> is the text that will be displayed.</p>"},{"location":"get_started/stage_4/#checking-out-the-status","title":"Checking Out the Status","text":"<p>Going back to the terminal (if using VS Code, you can open a new terminal inside VS Code by pressing <code>Ctrl + Shift + ~</code>), we can run the following command:</p> <pre><code>git status\n</code></pre> <p>Take a moment to read the output of this command.</p> <p>It should look something like this:</p> <pre><code>On branch main\n\nNo commits yet\n\nUntracked files:\n(use \"git add &lt;file&gt;...\" to include in what will be committed)\nREADME.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p><code>git status</code> is a very useful command, and you will be using it a lot. It will tell you what branch you are on, what files have been changed since your last commit, and more.</p> <p>This may look a little confusing at first, but it's not hard to understand. Let's try to break it down.</p>"},{"location":"get_started/stage_4/#what-is-the-staging-area-branches-and-commits","title":"What Is The Staging Area, Branches, and Commits?","text":""},{"location":"get_started/stage_4/#untracked-files","title":"Untracked Files","text":"<p>Let's take a step back and look at the big picture. Git is used for keeping track of changes to your files. However, there are many files that we may wish to ignore, or that we don't want to keep track of (personal files, os files, etc.).</p> <p>Every time you create a new file, Git doesn't know what it should do with it, this is an <code>untracked file</code>.</p> <ul> <li><code>Untracked files</code>: tells us exactly which files are untracked. That's why we see <code>README.md</code> in the list of untracked files.</li> </ul> <p>From here, we can either <code>add</code> the file to the <code>staging area</code>, or we can ignore it. We will be covering both of these options soon enough. For now, you should know the staging area is a preparatory area for files that are ready to be <code>committed</code> (saved).</p>"},{"location":"get_started/stage_4/#staging-area","title":"Staging Area","text":"<p>Git works by keeping track of changes to your files. When you make a change to a file, Git will notice this change and will ask you if you want to save it. If you do, Git will save a copy of the file in a special \"folder\" (invisible to the user) called the staging area. </p> <ul> <li><code>nothing added to commit but untracked files present</code> is telling us that we have not yet added any files to the staging area.</li> </ul>"},{"location":"get_started/stage_4/#commits","title":"Commits","text":"<p>Commits can be thought of as \"checkpoints\" in your project, similar to a save point in a video game. You can always go back to a previous commit if you need to.</p> <p>When you are ready to save the changes in your staging area, you will need to <code>commit</code> them. This means that Git will take all of the files in the staging area and save them to the repository. </p> <ul> <li><code>No commits yet</code> is telling us that we have not yet made any commits to our repository.</li> </ul>"},{"location":"get_started/stage_4/#branches","title":"Branches","text":"<p>Because of this workflow, it's useful to think of a Git repository as a timeline of changes. Every time you make a commit, you are adding a new \"event\" to the timeline.</p> <p>Similarly, you can think of a branch as a timeline of commits, of which the <code>main</code> branch is the default branch. In our repository we only have one timeline (aka branch): the <code>main</code> branch; but many branches can exist in a single repository. 1</p> <p>(<code>main</code> is also sometimes referred to as the <code>master</code> branch. This is because the <code>master</code> branch was the default branch in Git until recently.)</p> <p>"},{"location":"get_started/stage_4/#you-have-successfully-cloned-your-repository","title":"You Have Successfully Cloned Your Repository!","text":"<p>You can now move to the next session </p> <ol> <li> <p>I know I said I wouldn't go into branches, but this is necessary to understand what's going on here.\u00a0\u21a9</p> </li> </ol>"},{"location":"get_started/stage_5/","title":"Our First Commit &amp; Push","text":"<p>Progress</p> <ul> <li> 1. Create a \"repository\" (project) with a Git hosting tool (like GitHub)</li> <li> 2. Copy (or clone) the repository to your local machine</li> <li> 3. \"<code>Add</code>\" a file to your local repo \"<code>commit</code>\" (save) the changes</li> <li> 4. \"<code>Push</code>\" your changes to your main branch</li> <li> 5. Make a change to your file with a Git hosting tool and commit</li> <li> 6. \"<code>Pull</code>\" the changes to your local machine</li> </ul>"},{"location":"get_started/stage_5/#adding-a-file-to-the-staging-area-git-add","title":"Adding a File to the Staging Area: <code>git add</code>","text":"<p>We decided we want to add our README file to the staging area, so we can commit it.  We can do this by running the following command:</p> <pre><code>git add README.md\n</code></pre> <p><code>git add .</code> will add all files in the current directory to the staging area.</p> <p>If we run <code>git status</code> again, we will see that the output has changed:</p> <pre><code>On branch main\n\nNo commits yet\n\nChanges to be committed:\n(use \"git rm --cached &lt;file&gt;...\" to unstage)\nnew file:   README.md\n</code></pre> <p>Git is telling us that we have added a new file to the staging area and that we are ready to commit it.</p> <p>Git will track any changes we make to this file from now on unless we remove it from the staging area with <code>git rm --cached README.md</code>.</p>"},{"location":"get_started/stage_5/#modifying-a-file-in-the-staging-area","title":"Modifying A File in the Staging Area","text":"<p>Before we commit to committing the file (pun intended), let's make a change to the file.  We will add a new line to the README file:</p> <pre><code># My First Repo &amp; Git Tutorial\n</code></pre> <p>Once again, we will run <code>git status</code>:</p> <pre><code>On branch main\n\nNo commits yet\n\nChanges to be committed:\n(use \"git rm --cached &lt;file&gt;...\" to unstage)\nnew file:   README.md\n\nChanges not staged for commit:\n(use \"git add &lt;file&gt;...\" to update what will be committed)\n(use \"git restore &lt;file&gt;...\" to discard changes in working directory)\nmodified:   README.md\n</code></pre> <p>We have a new message here: <code>Changes not staged for commit</code>. This is telling us that we have made changes to a file that is already in the staging area but we have not yet added those changes to the staging area.</p> <p>To add the changes to the staging area, we can run <code>git add README.md</code> again. Alternatively, we can run <code>git restore README.md</code> to discard the changes we made to the file.</p> <p><code>add -u</code> will add all changes to the staging area.</p> <p>Doing so will change the output of <code>git status</code> to the previous output.</p>"},{"location":"get_started/stage_5/#committing-a-file-git-commit","title":"Committing a File: <code>git commit</code>","text":"<p>Finally, we decided that the file(s) in our staging area are ready to be committed.  We can do this by running the following command:</p> <pre><code>git commit -m \"Add README\"\n</code></pre> <p>This should output the following:</p> <pre><code>[main (root-commit) 8f91409] Add README\n 1 file changed, 1 insertion(+)\ncreate mode 100644 README.md    </code></pre> <p>If you omit the <code>-m</code> option, your terminal screen will change and you will be prompted to enter a commit message in your default text editor. This is useful if you want to write a longer commit message.</p> <p>Commit Messages</p> <p>When you make a commit, you will need to provide a commit message. This is a short message that describes the changes you made in this commit. It is a good idea to write a meaningful commit message, as it will help you and others understand what changes were made in this commit. This is especially useful if you're trying to a specific change in the future.</p> <p>As seen above this is done by adding <code>-m \"My message\"</code> to the <code>git commit</code> command.</p> <p>If we run <code>git status</code> again, we will see that the output has changed:</p> <pre><code>On branch main\nnothing to commit, working tree clean\n</code></pre> <p>Git is telling us that we have successfully committed our changes to the main branch of our repository.</p>"},{"location":"get_started/stage_5/#setting-the-default-branch","title":"Setting the Default Branch","text":"<p>To proceed with our first push, with first have to let Git know where, on GitHub, we want to push our changes to.</p> <p>To do this, we will need to run the following command:</p> <pre><code>git branch -M main\n</code></pre> <p>Which will set the main branch as the default branch for our repository.</p> <p>Then we will need to run the following command:</p> <pre><code>git remote add origin REPOSITORY_URL\n</code></pre> <p>Where <code>REPOSITORY_URL</code> is the URL of our repository on GitHub, this tells Git where exactly on GitHub we want to push our changes.</p> <p>This only has to be done once when the repository is created, Git will remember the default branch for future pushes.</p>"},{"location":"get_started/stage_5/#our-first-push","title":"Our First Push","text":"<p>Finally, we can push our changes to the main branch of our repository. Meaning all of our commits will be saved remotely and viewed on GitHub.</p> <p>To do this, we will need to run the following command:</p> <pre><code>git push -u origin main\n</code></pre> <p>This command will push our changes to the main branch of our repository. The <code>-u</code> option will set the main branch as the default branch for our repository. This means that we will not need to specify the branch name when we push our changes in the future, meaning we can simply run <code>git push</code>.</p> <p>If we go back to our GitHub repository, we will see some changes:</p> <p></p> GitHub homepage <p>Firstly we can see our landing page has changed to show our README file. Secondly, we can see that a file <code>README.md</code> has been added to our repository, and lastly, we see that our commit message <code>Add README</code> has been added to our commit history.</p> <p>From this point on, every time you want to save the state of your repository, you will follow this workflow:</p> <ol> <li>Make changes to your files and/or add new files.</li> <li>Use <code>git add .</code> to add the files to the staging area.</li> <li>Use <code>git commit -m \"MSG\"</code> to commit the changes to the repository.</li> <li>Use <code>git push</code> to push the changes to the main branch of your repository.</li> </ol> <p>"},{"location":"get_started/stage_5/#you-have-successfully-made-your-first-commit-push","title":"You Have Successfully Made Your First Commit &amp; Push!","text":"<p>You can now move to the next session </p>"},{"location":"get_started/stage_6/","title":"Ignoring Files &amp; Deleting Files","text":"<p>Progress</p> <ul> <li> 1. Create a \"repository\" (project) with a Git hosting tool (like GitHub)</li> <li> 2. Copy (or clone) the repository to your local machine</li> <li> 3. \"<code>Add</code>\" a file to your local repo \"<code>commit</code>\" (save) the changes</li> <li> 4. \"<code>Push</code>\" your changes to your main branch</li> <li> 5. Make a change to your file with a Git hosting tool and commit</li> <li> 6. \"<code>Pull</code>\" the changes to your local machine</li> </ul> <p>In some cases, we will want to ignore certain files. For example, we may want to ignore files that are specific to our operating system, files that are specific to our text editor, or private information. We can do this by creating a file called <code>.gitignore</code>. This file will tell Git to ignore certain files.</p> <p>In other cases, we may want to delete files that we previously added but no longer want to keep track of. </p>"},{"location":"get_started/stage_6/#creating-new-files","title":"Creating New Files","text":"<p>Let's make two new files, <code>no_need.md</code> and <code>private_data.md</code>. We will use these files to demonstrate how to ignore files and how to delete files. As such, they can remain empty.</p> <p>With <code>git status</code> we see:</p> <pre><code>On branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n(use \"git add &lt;file&gt;...\" to include in what will be committed)\nno_need.md\n        private_data.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre>"},{"location":"get_started/stage_6/#adding-a-gitignore-file","title":"Adding a <code>.gitignore</code> File","text":"<p>We decide we want to keep the <code>private_data.md</code> file to ourselves, and we wish for Git to ignore it. The first step is to create a new file called <code>.gitignore</code> and add the following line to it:</p> <pre><code>private_data.md\n</code></pre> <p>If we run <code>git status</code> again, we see:</p> <pre><code>On branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n(use \"git add &lt;file&gt;...\" to include in what will be committed)\n.gitignore\n        no_need.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>The file disappears from the list of untracked files, and Git is now ignoring it. We can see that Git is now ignoring the <code>no_need.md</code> file, but it is still tracking the <code>private_data.md</code> file.</p> <p>We can add all the names of the files we don't want to track in the <code>.gitignore</code> file, one per line. </p> <p>Ignoring Files of a Certain Type</p> <p>It may become tedious to add all the files we don't want to track to the <code>.gitignore</code> file. Fortunately, Git allows us to ignore files of a certain type. For example, if we want to ignore all files with a certain extension, we can use the following syntax <code>*.extension</code>; for example, if we want to ignore all JPG images we can use <code>*.jpg</code>.</p> <p>Ignoring Files in a Certain Directory</p> <p>Similarly, if we want to ignore all files in a certain directory, we can use the following syntax <code>directory_name/*</code>; for example, if we want to ignore all files in a directory called <code>images</code>, we can use <code>images/*</code> or <code>images/</code>.</p> <p>Virtualenv</p> <p>If you want to use a Virtualenv, this is the time and place to do it, this is because you won't want to track your Virtualenv files in your repository.</p> <p>You can create a new Virtualenv by running the following command:</p> Linux/MacOSWindows <pre><code>python3 -m venv env\n</code></pre> <pre><code>py -m venv env\n</code></pre> <p>For more information see the Virtualenv section in \"Getting Started\".</p> <p>After you have created your Virtualenv, you can add the following line to your <code>.gitignore</code> file:</p> <pre><code>env/\n</code></pre> <p>As we've done before, we add these new files to the tracking system with <code>git add .</code>, we commit the changes with <code>git commit -m \"Added new files\"</code>, and we push the changes to the remote repository with <code>git push</code>.</p> <p>Our repo should now look like this:</p> <p></p>"},{"location":"get_started/stage_6/#file-deletions","title":"File Deletions","text":"<p>Now, we decide we want to delete the <code>no_need.md</code> file, because we no longer need it. </p> <p>We can do this by any normal means, such as deleting the file in our text editor, via a file explorer or by running the following command:</p> <pre><code>rm no_need.md\n</code></pre> <p>Now, if we run <code>git status</code> we see:</p> <pre><code>On branch main\n\nChanges not staged for commit:\n(use \"git add &lt;file&gt;...\" to update what will be committed)\n(use \"git restore &lt;file&gt;...\" to discard changes in working directory)\ndeleted:    no_need.md\n</code></pre> <p>We see that Git is aware that we have deleted the <code>no_need.md</code> file, but it is not yet aware that we want to delete it from the repository. We can do this by running <code>git add -u</code> or <code>git rm no_need.md</code>. </p> <p>Restoring Files</p> <p>If accidentally deleted a file, you can use <code>git restore --staged &lt;file&gt;</code> to unstage the deletion. </p> <p>If you accidentally ran <code>git rm &lt;file&gt;</code>, you can use <code>git restore &lt;file&gt;</code> to restore the file.)</p> <p><code>add -u</code> will add all changes to the staging area, including deletions. If you want to add all changes except deletions, you can run <code>git add -A</code>.</p> <p>A <code>git status</code> now shows:</p> <pre><code>On branch main\n\nChanges to be committed:\n(use \"git restore --staged &lt;file&gt;...\" to unstage)\ndeleted:    no_need.md\n</code></pre> <p>We can now commit the changes with <code>git commit -m \"Deleted no_need.md\"</code>, and push the changes to the remote repository with <code>git push</code>.</p> <p>Our repo should now look like this:</p> <p></p> <p>Deleted Files Are Still In Your History</p> <p>When you delete a file and commit the change, the file will still be in your previous commits, in the history of your repository. It will just be deleted in your current commit. If you want to completely remove a file from the history of your repository, you will need to use a tool like BFG Repo-Cleaner.</p> <p>Because Git is designed to keep track of changing files, removing those tracks and undoing the history itself is far more complicated than what we are doing here, and is beyond the scope of this tutorial.</p> <p>"},{"location":"get_started/stage_6/#you-have-successfully-ignored-deleted-files-from-git","title":"You Have Successfully Ignored &amp; Deleted Files From Git!","text":"<p>You can now move to the next session </p>"},{"location":"get_started/stage_7/","title":"Remote Changes To Your Repository","text":"<p>Progress</p> <ul> <li> 1. Create a \"repository\" (project) with a Git hosting tool (like GitHub)</li> <li> 2. Copy (or clone) the repository to your local machine</li> <li> 3. \"<code>Add</code>\" a file to your local repo \"<code>commit</code>\" (save) the changes</li> <li> 4. \"<code>Push</code>\" your changes to your main branch</li> <li> 5. Make a change to your file with a Git hosting tool and commit</li> <li> 6. \"<code>Pull</code>\" the changes to your local machine</li> </ul> <p>We have now explored all the basic ways to interact with a Git repository. Now we want to explore two more ways to interact with a Git repository: </p> <ol> <li>Making changes to a file remotely </li> <li>Pulling those changes to your local machine.</li> </ol>"},{"location":"get_started/stage_7/#making-changes-to-a-file-remotely","title":"Making Changes to a File Remotely","text":"<p>We have already seen how to make changes to a file locally. Now we want to see how to make changes to a file remotely. This could be done by someone else on your team, or by yourself on another machine. </p> <p>Since we don't have a team or another machine, we will make the changes to the file ourselves on GitHub itself, which is basically a remote machine.</p>"},{"location":"get_started/stage_7/#making-changes-to-a-file-remotely-on-github","title":"Making Changes to a File Remotely on GitHub","text":"<ol> <li>Go to your repository on GitHub.</li> <li>Click on the <code>README.md</code> file.</li> </ol> <p>From here you want to click the edit item (the pencil icon) in the top right corner of the file, as shown below:</p> <p></p> <p>This will open the file in edit mode. Let's make a change to the file.</p> <p>First, we will add a new line to the file that says \"This is a change I made remotely\":</p> <p></p> <p>We note that (arrow \"2\") GitHub has already added a commit message for us. The default commit message is \"Update README.md\". This is a good commit message, so we will leave it as is.</p> <p>It also specifies that it will be committed to the \"main\" branch. This is also correct, so we will leave it as is.</p> <p>Next, we will click the green \"Commit changes\" button at the bottom of the page (arrow \"3\").</p> <p>If we go back to the main page of our repository, we will see that the file has been updated with the commit message <code>Update README.md</code>.</p> <p>Easy vs Advanced</p> <p>In the following section, we will be pulling the remote changes to our local machine. This section will be split into two parts: \"Easy\" and \"Advanced\". </p> <p>The \"Easy\" section will contain a straightforward explanation of how to pull the changes to your local machine. In the \"Advanced\" section we will explore the idea of <code>merge conflicts</code>, which happen when two code updates are overlapping, and how to resolve them.</p> <p>You should read through both sections, and choose the one that is most appropriate for you.</p> Easy Advanced  <p>You can view a hisitory of all the commits in your repository by clicking on the \"insights\" tab followed by \"network\":</p> <p></p> <p>Progress</p> <ul> <li> 1. Create a \"repository\" (project) with a Git hosting tool (like GitHub)</li> <li> 2. Copy (or clone) the repository to your local machine</li> <li> 3. \"<code>Add</code>\" a file to your local repo \"<code>commit</code>\" (save) the changes</li> <li> 4. \"<code>Push</code>\" your changes to your main branch</li> <li> 5. Make a change to your file with a Git hosting tool and commit</li> <li> 6. \"<code>Pull</code>\" the changes to your local machine</li> </ul> <p>"},{"location":"get_started/stage_7/#pulling-changes-to-your-local-machine-easy","title":"Pulling Changes to Your Local Machine (Easy)","text":"<p>Now that we have made a change to the file remotely, we want to <code>pull</code> those changes to our local machine. Pull is the Git term equivalent to \"download updates\".</p> <p>This is a very simple process. All we need to do is run the following command in our terminal:</p> <pre><code>git pull\n</code></pre> <p>This will return a message explaining what changes, and of how many bits, the pull operation per the changes from the remote repository to our local machine.</p> <p>If we open the <code>README.md</code> file in our text editor, we will see that the file has been updated with the new line we added remotely.</p> <pre><code># My First Repo &amp; Git Tutorial\n\nThis is a change I made remotely\n</code></pre> <p>Congratulations! You have successfully pulled changes from a remote repository to your local machine.</p>"},{"location":"get_started/stage_7/#pulling-changes-to-your-local-machine-advanced","title":"Pulling Changes to Your Local Machine (Advanced)","text":"<p>Now that we have made a change to the file remotely, we want to <code>pull</code> those changes to our local machine. Pull is the Git term equivalent to \"download updates\".</p>"},{"location":"get_started/stage_7/#making-some-changes-locally","title":"Making Some Changes Locally","text":"<p>Before we pull the changes, let's make some changes to the file locally. This will allow us to see how Git handles conflicts. Conflicts also called <code>merge conflicts</code>, occur when Git cannot automatically merge two changes to the same file. These conflicts occur when you, or a team member, make changes to the same file in the same branch in between pushes. These conflicts must be resolved manually.</p> <ol> <li>Open the <code>README.md</code> file in your text editor.</li> <li>Add a new line to the file that says \"This is a change I made locally\".</li> </ol> <p> </p>"},{"location":"get_started/stage_7/#attempting-to-pull-the-changes","title":"Attempting to Pull the Changes","text":"<p>Let's try our usual workflow of <code>add</code>, <code>commit</code>, and <code>push</code>, on the last we get an unexpected result.</p> <pre><code>To github.com:Jacopo-DM/ProjectMinecraft.git\n! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'github.com:Jacopo-DM/ProjectMinecraft.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n</code></pre> <p>Git is telling us that we need to <code>pull</code> the changes before we can <code>push</code> our changes. Let's do that.</p> <pre><code>git pull\n</code></pre> <p>The output now is even more obscure:</p> <pre><code>remote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nUnpacking objects: 100% (3/3), 719 bytes | 359.00 KiB/s, done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nFrom github.com:Jacopo-DM/ProjectMinecraft\n4f0bc51..c94a01e  main       -&gt; origin/main\nhint: You have divergent branches and need to specify how to reconcile them.\nhint: You can do so by running one of the following commands sometime before\nhint: your next pull:\nhint: \nhint:   git config pull.rebase false  # merge\nhint:   git config pull.rebase true   # rebase\nhint:   git config pull.ff only       # fast-forward only\nhint: \nhint: You can replace \"git config\" with \"git config --global\" to set a default\nhint: preference for all repositories. You can also pass --rebase, --no-rebase,\nhint: or --ff-only on the command line to override the configured default per\nhint: invocation.\nfatal: Need to specify how to reconcile divergent branches.\n</code></pre> <p>Thankfully, Git is giving us some helpful hints. It is telling us that we need to specify how to reconcile the divergent branches. We can do this by running one of the following commands:</p> <pre><code>git config pull.rebase false  # merge\ngit config pull.rebase true   # rebase\ngit config pull.ff only       # fast-forward only\n</code></pre> <p>These are the three different ways that Git can handle divergent branches. The intricacies of this are too complex to go into here. For now, we will use the default option, which is to merge the branches. We can do this by running the following command:</p> <pre><code>git config pull.rebase false\n</code></pre> <p>More Information</p> <p>More information on this for those interested:</p> <ul> <li>Git Merging vs. Rebasing</li> <li>Git Merge vs Rebase</li> <li>Git - When to Merge vs. When to Rebase</li> <li>Git tips</li> </ul> <p>Now that we have specified how to reconcile the divergent branches, we can try to <code>push</code> again.</p> <p>Now we get a new error:</p> <pre><code>Auto-merging README.md\nCONFLICT (content): Merge conflict in README.md\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre> <p>Git is telling us that there is a conflict. This is happening because we wrote a new line to the file locally, but someone else (us on GitHub) wrote something else on the same line remotely.</p> <p>We need to resolve this conflict before we can <code>push</code> our changes. Let's do that.</p>"},{"location":"get_started/stage_7/#resolving-a-conflict","title":"Resolving a Conflict","text":"<p>Once again <code>git status</code> comes to the rescue:</p> <pre><code>On branch main\nYour branch and 'origin/main' have diverged,\nand have 1 and 1 different commits each, respectively.\n(use \"git pull\" to merge the remote branch into yours)\n\nYou have unmerged paths.\n(fix conflicts and run \"git commit\")\n(use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n(use \"git add &lt;file&gt;...\" to mark resolution)\nboth modified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>From this, we can see that the file that is causing the conflict is <code>README.md</code>. We knew this, but in a larger project, it would be helpful to know which file is causing the conflict.</p> <p>If we reopen <code>README.md</code> in our editor, we can see the conflict:</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is a change I made locally\n=======\nThis is a change I made remotely\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; c94a01eefa115528633a213491fc64ccb0fdb66a\n</code></pre> <p>If you're using visual studio code, you can have a nice diff view of the conflict:</p> <p> </p> <p>The most sensible thing to do here is to keep both changes. We can do this by deleting the conflict markers and keeping both lines:</p> <pre><code>This is a change I made locally\n\nThis is a change I made remotely\n</code></pre> <p>or is VS Code: </p> <p> </p> <p>Now that we have resolved the conflict, we can <code>add</code> and <code>commit</code> the changes:</p> <pre><code>git add README.md\ngit commit -m \"Resolved conflict\"\n</code></pre> <p>Git status now tells us that we are ready to <code>push</code>:</p> <pre><code>On branch main\nYour branch is ahead of 'origin/main' by 2 commits.\n(use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n</code></pre> <p>We can finally <code>push</code> our changes:</p> <pre><code>git push\n</code></pre> <p>Now if we go back to GitHub, we can see that our changes have been pushed:</p> <p> </p> <p>Congratulations! You have successfully pulled changes from a remote repository to your local machine AND resolved a conflict!</p>"},{"location":"get_started/stage_7/#you-have-successfully-finish-the-first-part-of-this-tutorial","title":"You Have Successfully Finish The First Part of This Tutorial!","text":"<p>It's time to choose a project </p>"},{"location":"project/","title":"Project Ideas","text":"<p>This section has three purposes:</p> <ol> <li> <p>Practice using the Git commands we learned in the previous section.</p> </li> <li> <p>Give you realistic examples of how we could use Git to track a (coding) project.</p> </li> <li> <p>Teach you how to <code>clone</code> and utilize open-source projects.</p> </li> </ol>"},{"location":"project/#git-clone","title":"Git Clone","text":"<p>The <code>git clone</code> command is used to copy a repository from a remote location to your local machine.  This could be your own work you want to work on from a different computer, or it could be a project you want to contribute to, or it could be a project you want to use as a starting point for your own project.</p> <p>The basic syntax for the <code>git clone</code> command is:</p> <pre><code>git clone &lt;remote_location&gt; &lt;local_location&gt;\n</code></pre> <p>The <code>remote_location</code> is the location of the repository you want to copy. This would be a URL to a GitHub repository. The <code>local_location</code> is the location on your local machine where you want to copy the repository. This would be a path to a folder on your computer.</p> <p>Don't worry if this doesn't make sense right now. We will be using the <code>git clone</code> command in the next section to clone a project.</p>"},{"location":"project/#project-ideas_1","title":"Project Ideas","text":"<p>Three possible projects were handcrafted for this workshop. They are:</p>"},{"location":"project/#coding-a-pytorch-mnist-classifier","title":"Coding a Pytorch MNIST Classifier","text":"<p>(source)1</p>"},{"location":"project/#coding-a-minecraft-clone","title":"Coding a Minecraft Clone","text":"<p>(source)2</p>"},{"location":"project/#coding-a-simple-personal-website","title":"Coding a Simple Personal Website","text":"<p>(source)3</p> <ol> <li> <p>[https://nextjournal.com/gkoehler/pytorch-mnist]\u00a0\u21a9</p> </li> <li> <p>[https://github.com/SpyderGamer/Minecraft-with-Python]\u00a0\u21a9</p> </li> <li> <p>[https://squidfunk.github.io/mkdocs-material/getting-started/]\u00a0\u21a9</p> </li> </ol>"},{"location":"project/minecraft/","title":"Minecraft Clone Project","text":""},{"location":"project/mnist/","title":"MNIST Character Recognition Project","text":""},{"location":"project/website/","title":"Website Building Project","text":""},{"location":"welcome/about_me/","title":"About The Presenter","text":"<p>My name is Jacopo Di Matteo, I am an Italian final-year student of the Master of Artificial Intelligence at the University of Amsterdam.</p> <p>I am currently working on my Master's thesis at the Computational Intelligence group of the Vrije Universiteit Amsterdam in the field of evolutionary robotics.</p> <p>I did my bachelor's degree in Artificial Intelligence at the University of Manchester between 2016 and 2020, where I also worked for two years as a software engineer at a startup company between 2018 to 2020.</p> <p>Before that, in early 2016, I also participated in the Fab Academy, where I learned how to use 3D printers and CNC machines, as well as my first experience using Git.</p>"},{"location":"welcome/cheatsheet/","title":"Git Cheatsheet","text":"<p>Here is a summary of all the Git commands we will be using in this tutorial.</p>"},{"location":"welcome/cheatsheet/#one-time-setup","title":"One Time Setup","text":""},{"location":"welcome/cheatsheet/#configuring-git","title":"Configuring Git","text":"<pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your_email@example.com\"\n</code></pre>"},{"location":"welcome/cheatsheet/#generating-an-ssh-key","title":"Generating an SSH Key","text":"<pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\ncat ~/.ssh/id_ed25519.pub\n</code></pre>"},{"location":"welcome/cheatsheet/#on-a-new-project","title":"On a New Project","text":""},{"location":"welcome/cheatsheet/#initializing-a-new-repository","title":"Initializing a New Repository","text":"<pre><code>git init\n</code></pre>"},{"location":"welcome/cheatsheet/#adding-a-remote-repository","title":"Adding a Remote Repository","text":"<pre><code>git branch -M main\ngit remote add origin REPOSITORY_URL\ngit push -u origin main\ngit config pull.rebase false\n</code></pre>"},{"location":"welcome/cheatsheet/#cloning-a-repository","title":"Cloning a Repository","text":"<pre><code>git clone REPOSITORY_URL\n</code></pre>"},{"location":"welcome/cheatsheet/#on-an-existing-project","title":"On an Existing Project","text":""},{"location":"welcome/cheatsheet/#checking-the-status-of-your-project","title":"Checking the Status of Your Project","text":"<pre><code>git status\n</code></pre>"},{"location":"welcome/cheatsheet/#adding-files-to-the-staging-area","title":"Adding Files to the Staging Area","text":"<pre><code>git add FILENAME # Adds a single file\ngit add * # Adds all files (works with new files too, not recommended)\ngit add -u # Adds all modified files (works with deleted files too, but not new files)\ngit add . # Adds all files (recommended)\n</code></pre>"},{"location":"welcome/cheatsheet/#removing-files-from-the-staging-area","title":"Removing Files from the Staging Area","text":"<pre><code>git rm FILENAME\n</code></pre>"},{"location":"welcome/cheatsheet/#restoring-files-from-the-staging-area","title":"Restoring Files from the Staging Area","text":"<pre><code>git restore --staged FILENAME # After normal removal\ngit restore FILENAME # After \"git rm FILENAME\"\n</code></pre>"},{"location":"welcome/cheatsheet/#committing-changes","title":"Committing Changes","text":"<pre><code>git commit -m \"Commit message\"\n</code></pre>"},{"location":"welcome/cheatsheet/#pushing-changes","title":"Pushing Changes","text":"<pre><code>git push\n</code></pre>"},{"location":"welcome/cheatsheet/#pulling-changes","title":"Pulling Changes","text":"<pre><code>git pull\n</code></pre>"}]}